package main

import (
	"bufio"
	"flag"
	"fmt"
	"io"
	"log"
	"net/http"
	"strings"
	"sync"
	"time"
)

var mrrs []string
var wg sync.WaitGroup

func main() {
	c := flag.Int("count", 5, "Mirrors count")
	flag.Parse()

	res, e := http.Get("https://www.archlinux.org/mirrorlist/all")
	if e != nil {
		log.Fatal(e.Error())
	}

	binRes, e := io.ReadAll(res.Body)
	if e != nil {
		log.Fatal(e.Error())
	}

	strRes := strings.TrimSpace(string(binRes))
	s := bufio.NewScanner(strings.NewReader(strRes))
	for s.Scan() {
		if s.Text() != "" && !strings.HasPrefix(s.Text(), "##") {
			mrrs = append(mrrs, strings.Replace(strings.Replace(s.Text(), "#Server = ", "", -1), "/$repo/os/$arch", "", -1))
		}
	}

	sMrrs := make(chan string, *c)
	wg.Add(*c)
	for _, mrr := range mrrs {
		go sortMirrors(mrr, sMrrs)
	}

	wg.Wait()
	close(sMrrs)

	for mrr := range sMrrs {
		fmt.Println(mrr)
	}

	fmt.Println("# Generated by github.com/enindu/mirrorlist")
}

func sortMirrors(mrr string, c chan string) {
	st := time.Now()
	http.Get(mrr)
	en := time.Since(st).Seconds()
	c <- fmt.Sprintf("# %f\nServer = %s/$repo/os/$arch", en, mrr)
	wg.Done()
}
