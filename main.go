package main

import (
	"bufio"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strings"
	"sync"
	"time"
)

var mirrors []string
var waitGroup sync.WaitGroup

func main() {
	count := flag.Int("count", 5, "Mirrors count")
	flag.Parse()

	response, exception := http.Get("https://www.archlinux.org/mirrorlist/all")
	if exception != nil {
		log.Fatal(exception.Error())
	}

	binaryResponse, exception := ioutil.ReadAll(response.Body)
	if exception != nil {
		log.Fatal(exception.Error())
	}

	responseString := strings.TrimSpace(string(binaryResponse))
	responseScanner := bufio.NewScanner(strings.NewReader(responseString))
	for responseScanner.Scan() {
		if responseScanner.Text() != "" && !strings.HasPrefix(responseScanner.Text(), "##") {
			mirrors = append(mirrors, strings.Replace(strings.Replace(responseScanner.Text(), "#Server = ", "", -1), "/$repo/os/$arch", "", -1))
		}
	}

	sortedMirrors := make(chan string, *count)
	waitGroup.Add(*count)
	for _, mirror := range mirrors {
		go func(mirror string) {
			start := time.Now()
			http.Get(mirror)
			end := time.Now().Sub(start).Seconds()
			sortedMirrors <- fmt.Sprintf("# %f\nServer = %s/$repo/os/$arch", end, mirror)
			waitGroup.Done()
		}(mirror)
	}

	waitGroup.Wait()
	close(sortedMirrors)

	for mirror := range sortedMirrors {
		fmt.Println(mirror)
	}

	fmt.Println("# Generated by github.com/enindu/mirrorlist")
}
